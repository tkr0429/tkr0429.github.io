<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>tkr0429 blog</title><link href="http://tkr0429.github.io/" rel="alternate"></link><link href="http://tkr0429.github.io/feeds/blog.atom.xml" rel="self"></link><id>http://tkr0429.github.io/</id><updated>2014-09-16T14:00:00+09:00</updated><entry><title>GlusterFSのインストール</title><link href="http://tkr0429.github.io/2014/09/glusterfs1/" rel="alternate"></link><updated>2014-09-16T14:00:00+09:00</updated><author><name>tkr0429</name></author><id>tag:tkr0429.github.io,2014-09-16:2014/09/glusterfs1/</id><summary type="html">&lt;h1 id="glusterfs"&gt;glusterfsのインストール&lt;/h1&gt;
&lt;p&gt;glusterfsのインストール覚書です。&lt;/p&gt;
&lt;h2 id="_1"&gt;事前作業&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;レポジトリの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;glusterfsのレポジトリを追加します。&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="curl-ls-httpdownloadglusterorgpubglusterglusterfslatestepelrepoglusterfs-epelrepo-etcyumreposdglusterfs-epelrepo"&gt;curl -Ls http://download.gluster.org/pub/gluster/glusterfs/LATEST/EPEL.repo/glusterfs-epel.repo &amp;gt; /etc/yum.repos.d/glusterfs-epel.repo&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パッケージのインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;yumコマンドで各種パッケージをインストール&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="yum-y-install-glusterfs-server"&gt;yum -y install glusterfs-server \&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;             glusterfs-libs \
             glusterfs-api \
             glusterfs-extra-xlators \
             glusterfs-fuse \
             glusterfs-geo-replication \
             glusterfs-rdma \
             glusterfs-resource-agents \
             glusterfs-cli \
             xfsprogs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パーティション作成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;glusterfsのbrickを作成するための領域をOS領域とは別にパーティションを作ります。
```&lt;/p&gt;
&lt;h1 id="fdisk-devsda"&gt;fdisk /dev/sda&lt;/h1&gt;
&lt;p&gt;コマンド (m でヘルプ): n
コマンドアクション
   e   拡張
   p   基本パーティション (1-4)
p
パーティション番号 (1-4): 4
最初 シリンダ (1-652, 初期値 1):
初期値 1 を使います
Last シリンダ, +シリンダ数 or +size{K,M,G} (1-652, 初期値 652):
初期値 652 を使います&lt;/p&gt;
&lt;p&gt;コマンド (m でヘルプ): w
パーティションテーブルは変更されました！&lt;/p&gt;
&lt;p&gt;ioctl() を呼び出してパーティションテーブルを再読込みします。
ディスクを同期しています。
```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xfsでフォーマット&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="mkfsxfs-f-i-size512-devsda3"&gt;mkfs.xfs -f -i size=512 /dev/sda3&lt;/h1&gt;
&lt;p&gt;meta-data=/dev/sda3              isize=512    agcount=4, agsize=622878 blks
         =                       sectsz=512   attr=2, projid32bit=0
data     =                       bsize=4096   blocks=2491510, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0
log      =internal log           bsize=4096   blocks=2560, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マウント先ディレクトリの作成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="mkdir-p-gfsbrick01"&gt;mkdir -p /gfs/brick01&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fstab への記載
起動時に自動マウントされるようにfstabにマウント設定を記載します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="cat-eof-etcfstab"&gt;cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /etc/fstab&lt;/h1&gt;
&lt;p&gt;/dev/sda3       /gfs/brick01        xfs defaults    0 0
EOF
```&lt;/p&gt;
&lt;h2 id="glusterfs_1"&gt;GlusterFSの設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;サービスの起動&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="service-glusterd-start"&gt;service glusterd start&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Peerの設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="gluster-peer-probe-vm02"&gt;gluster peer probe vm02&lt;/h1&gt;
&lt;p&gt;peer probe: success.
```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GlusterFSボリュームの作成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="gluster-vol-create-vol01"&gt;gluster vol create vol01 \&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;      replica 2 \
      vm01:/gfs/brick01/vol01 \
      vm02:/gfs/brick01/vol01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;volume create: vol01: success: please start the volume to access data
```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;volumeの開始&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="gluster-vol-start-vol01"&gt;gluster vol start vol01&lt;/h1&gt;
&lt;p&gt;volume start: vol01: success
```&lt;/p&gt;
&lt;h2 id="_2"&gt;チューニング&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GlusterFSチューニング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="gluster-vol-set-vol01-performancecache-size-8gb"&gt;gluster vol set vol01 performance.cache-size 8GB&lt;/h1&gt;
&lt;h1 id="gluster-vol-set-vol01-performancecache-max-file-size-100mb"&gt;gluster vol set vol01 performance.cache-max-file-size 100MB&lt;/h1&gt;
&lt;h1 id="gluster-vol-set-vol01-performancecache-min-file-size-1kb"&gt;gluster vol set vol01 performance.cache-min-file-size 1KB&lt;/h1&gt;
&lt;h1 id="gluster-vol-set-vol01-performancecache-refresh-timeout-1"&gt;gluster vol set vol01 performance.cache-refresh-timeout 1&lt;/h1&gt;
&lt;h1 id="gluster-vol-set-vol01-performanceio-thread-count-32"&gt;gluster vol set vol01 performance.io-thread-count 32&lt;/h1&gt;
&lt;h1 id="gluster-vol-set-vol01-performanceflush-behind-on"&gt;gluster vol set vol01 performance.flush-behind On&lt;/h1&gt;
&lt;h1 id="gluster-vol-set-vol01-performancewrite-behind-window-size-5mb"&gt;gluster vol set vol01 performance.write-behind-window-size 5MB&lt;/h1&gt;
&lt;h1 id="gluster-vol-set-vol01-networkframe-timeout-1800"&gt;gluster vol set vol01 network.frame-timeout 1800&lt;/h1&gt;
&lt;h1 id="gluster-vol-set-vol01-networkping-timeout-30"&gt;gluster vol set vol01 network.ping-timeout 30&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kernelチューニング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1 id="vi-etcrclocal"&gt;vi /etc/rc.local&lt;/h1&gt;
&lt;p&gt;===========&lt;/p&gt;
&lt;p&gt;sysctl -w vm.swappiness=10;
sysctl -w vm.dirty_background_ratio=1;
sysctl -w kernel.sched_wakeup_granularity_ns=15
for i in $(ls -d /sys/block/*/queue/iosched 2&amp;gt;/dev/null); do
    iosched_dir=$(echo $i | awk '/iosched/ {print $1}')
    [ -z $iosched_dir ] &amp;amp;&amp;amp; {
    continue
    }
    path=$(dirname $iosched_dir)
    [ -f $path/scheduler ] &amp;amp;&amp;amp; {
    echo "deadline" &amp;gt; $path/scheduler
    }
    [ -f $path/nr_requests ] &amp;amp;&amp;amp; {
    echo "256" &amp;gt; $path/nr_requests
    }
done
```&lt;/p&gt;</summary><category term="glusterfs"></category></entry><entry><title>Ansible で su</title><link href="http://tkr0429.github.io/2014/09/ansible-su/" rel="alternate"></link><updated>2014-09-12T18:00:00+09:00</updated><author><name>tkr0429</name></author><id>tag:tkr0429.github.io,2014-09-12:2014/09/ansible-su/</id><summary type="html">
&lt;h1 id="ansible-su"&gt;Ansible で su&lt;/h1&gt;
&lt;p&gt;ansibleでsu使うと&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ su   
パスワード:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;的な感じで日本語表記だと固まってしまう。&lt;br/&gt;
どうしたものかと考えた結果,リモートユーザのホームディレクトリに.i18nファイルを
作っちゃうのが手っ取り早いとなったので、
playbookに処理を追加。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- shell: "echo LANG=C &amp;gt; ~/.i18n"  
  register: result  
  changed_when: result.rc != 0  
  su: False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;毎回chengedになっちゃうのも煩わしいのでchecnged_when使って回避&lt;/p&gt;</summary><category term="python"></category><category term="ansible"></category></entry><entry><title>ansibleでパスワード認証&amp;suでのroot実行</title><link href="http://tkr0429.github.io/2014/09/ansible-pass-and-suroot/" rel="alternate"></link><updated>2014-09-08T20:00:00+09:00</updated><author><name>tkr0429</name></author><id>tag:tkr0429.github.io,2014-09-08:2014/09/ansible-pass-and-suroot/</id><summary type="html">
&lt;h2 id="_1"&gt;概要&lt;/h2&gt;
&lt;p&gt;パスワード認証ありのサーバに接続する必要があり、
且つ踏み台（こちらもパスワード認証）を越える必要があった。&lt;/p&gt;
&lt;p&gt;この時の作業メモ&lt;/p&gt;
&lt;h2 id="_2"&gt;前準備&lt;/h2&gt;
&lt;p&gt;パスワード認証を通るためには
sshpassが必要なので入れておく。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yum -y install --enablerepo=epel sshpass&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ansible.cfgを使って回避する。  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ssh_connection]
scp_if_ssh = True

# 下記に記載の&amp;lt;gateway-server&amp;gt;を踏み台サーバIPに書き換えてください.
ssh_args = -o ProxyCommand='sshpass -f passfile ssh -l %r &amp;lt;gateway-server&amp;gt; -W %h:%p'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;passfileにsshログインパスワードを書いておく  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;loginpasswd&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="playbook"&gt;playbookの作成&lt;/h2&gt;
&lt;p&gt;プレイブックの中身&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: all
  gather_facts: False
  su: True
  remote_user: loginuser
  su_user: root

  tasks:
    - name: command whoami
      command: whoami
      register: result

    - debug: msg={{result.stdout}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="_3"&gt;実行&lt;/h2&gt;
&lt;p&gt;ansible実行時に頭にLANG=Cを付けないと固まる。
環境によってはLANG=Cつけようが固まる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ LANG=C ansible-playbook -i host site.yml -k --ask-su-pass
SSH password:
su password:

PLAY [all] ********************************************************************

TASK: [command whoami] ********************************************************
changed: [client1]

TASK: [debug msg={{result.stdout}}] *******************************************
ok: [clinet1] =&amp;gt; {
   "msg": "root"
}

PLAY RECAP ********************************************************************
client1                      : ok=2    changed=1    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;</summary><category term="ansible"></category><category term="python"></category></entry><entry><title>YAPC::Asia 2014 Tokyoに行った話</title><link href="http://tkr0429.github.io/2014/09/yapc-asia/" rel="alternate"></link><updated>2014-09-08T17:00:00+09:00</updated><author><name>tkr0429</name></author><id>tag:tkr0429.github.io,2014-09-08:2014/09/yapc-asia/</id><summary type="html">
&lt;h1 id="yapcasia-2014-tokyo"&gt;YAPC:Asia 2014 Tokyo&lt;/h1&gt;
&lt;p&gt;今年はじめてYAPC:Asiaに@laugh_kさんの誘いで行って来ました。&lt;br/&gt;
0日目の前夜祭には仕事で残念ながら参加出来なかった。  &lt;/p&gt;
&lt;p&gt;まず最初に感想から書いてしまうと、&lt;br/&gt;
何故もっと早くにこんなイベントに参加しなかったんだ。。。&lt;br/&gt;
と後悔すら覚える程、衝撃を受けました。  &lt;/p&gt;
&lt;h2 id="1"&gt;1日目&lt;/h2&gt;
&lt;p&gt;色々なセッションをふらふらと見ていたが、
自分がインフラ系のエンジニアをやらせてもらっていることもあり、
それに関連するセッションを選んで聞いていた。
なかでも@studio3104さん の&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「インフラエンジニア(狭義)は死んだ」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;にはグサリと刺さる物を感じた。&lt;/p&gt;
&lt;p&gt;自分の現状を言われているようで、苦しく思う部分が多く
改めてコードを読み書きが出来るか否かの重要性を強く感じた。&lt;/p&gt;
&lt;h2 id="2"&gt;2日目&lt;/h2&gt;
&lt;p&gt;せっかくのperlのイベントなのでperlに触れたくなり飛び入りで&lt;br/&gt;
&lt;strong&gt;「Perl入学式 in YAPC::Asia Tokyo 2014」&lt;/strong&gt;&lt;br/&gt;
に参加してきた。  &lt;/p&gt;
&lt;p&gt;perlでbotシステムを作成するまでを学習してきたが、&lt;br/&gt;
講師の方々の熱い説明と各グループに一人ついてくれていたので&lt;br/&gt;
戸惑うことも少なくスムーズに受講する事が出来た。  &lt;/p&gt;
&lt;p&gt;なんと無くperlってあまり好きじゃないと思ってたけど、&lt;br/&gt;
完全に自分の食わず嫌いで、やってみたら面白かった。&lt;br/&gt;
今までなんでもシェルスクリプト or Pythonでやろうとしてたけど、 
1日目のセッションで見た@kentaroさんの  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「いろんな言語を適材適所で使おう」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;とはこういうことなんだなぁーと言うのを感じた。  &lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;LTも「TDD(Twitter Driven Datsu-Syoshinsya) / Twitter駆動脱初心者」が面白かった
@typestarさんのキーノートに関してはアウトプットの必要性やエンジニアとしての生き方を考えさせられた。&lt;/p&gt;
&lt;hr/&gt;
&lt;h2 id="_1"&gt;最後に&lt;/h2&gt;
&lt;p&gt;YAPC:Asiaは参加するまでperlのイベントってイメージが強かったんですが、&lt;br/&gt;
perlに限らずともIT系エンジニアであれば誰でも楽しめる内容だったと思います。&lt;br/&gt;
来年も是非参加したいと思える濃い内容で大変満足でした。&lt;/p&gt;</summary><category term="perl"></category></entry><entry><title>ブログはじめます。</title><link href="http://tkr0429.github.io/2014/09/first-post/" rel="alternate"></link><updated>2014-09-08T13:00:00+09:00</updated><author><name>tkr0429</name></author><id>tag:tkr0429.github.io,2014-09-08:2014/09/first-post/</id><summary type="html">&lt;p&gt;ブログはじめます。&lt;/p&gt;
&lt;p&gt;pelicanって物を知ったのでブログ始めようかと思います。&lt;br /&gt;
大した事は書けないけど、技術メモ的な感じで使って行こうかと思います。&lt;/p&gt;</summary><category term="python"></category></entry></feed>